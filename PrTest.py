import random
import gmpy2


def is_prime(n: int) -> bool:
    if n == 2:  # 2是素数
        return True
    if n < 2 or n % 2 == 0:  # 1,0,负数以及大于2的偶数都不是素数
        return False
    # 创建小素数的列表,可以大幅加快速度
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
              107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
              227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,
              349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
              467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
              613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
              751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,
              887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
    if n in primes:  # 如果在素数表里，则直接返回True
        return True
    sqrt = pow(n, 0.5)
    for i in primes:  # 确定性素数测试算法
        if i <= sqrt:
            if n % i == 0:
                return False
            continue
        return True

    # 概率测试算法
    if not Miller_Rabin(n):
        return False
    return True


def Miller_Rabin(n: int) -> bool:
    u = n - 1
    t = 0
    while u % 2 == 0:
        u = u // 2
        t += 1
    for times in range(10):  # 连续测试10次，增加正确率
        a = random.randrange(2, n - 1)  # 选择小于num的数做概率测试
        v = pow(a, u, n)
        if v != 1:
            i = 0
            while v != (n - 1):
                if i == t - 1:
                    return False
                else:
                    i = i + 1
                    v = (v ** 2) % n
    return True


def main():
    n = 2537
    print('%d is a prime ? :' % n + str(is_prime(n)))  # 素性检验
    print(is_prime(n) == gmpy2.is_prime(n))  # 调用python自带的素性检验函数，检查正确性


if __name__ == '__main__':
    main()
